<?php
/**
 * InlineResponse20017
 *
 * PHP version 5
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telstra Programmable Network API
 *
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.4.2
 * Contact: pnapi-support@team.telstra.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace tpn\Model;

use \ArrayAccess;
use \tpn\ObjectSerializer;

/**
 * InlineResponse20017 Class Doc Comment
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse20017 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_17';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'phone' => 'string',
        'city' => 'string',
        'fax' => 'string',
        'country' => 'string',
        'address' => 'string',
        'state' => 'string',
        'website' => 'string',
        'companyuuid' => 'string',
        'companyname' => 'string',
        'postalcode' => 'string',
        'customertype' => 'string',
        'status' => 'string',
        'customeraccountid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'phone' => null,
        'city' => null,
        'fax' => null,
        'country' => null,
        'address' => null,
        'state' => null,
        'website' => null,
        'companyuuid' => null,
        'companyname' => null,
        'postalcode' => null,
        'customertype' => null,
        'status' => null,
        'customeraccountid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phone' => 'phone',
        'city' => 'city',
        'fax' => 'fax',
        'country' => 'country',
        'address' => 'address',
        'state' => 'state',
        'website' => 'website',
        'companyuuid' => 'companyuuid',
        'companyname' => 'companyname',
        'postalcode' => 'postalcode',
        'customertype' => 'customertype',
        'status' => 'status',
        'customeraccountid' => 'customeraccountid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phone' => 'setPhone',
        'city' => 'setCity',
        'fax' => 'setFax',
        'country' => 'setCountry',
        'address' => 'setAddress',
        'state' => 'setState',
        'website' => 'setWebsite',
        'companyuuid' => 'setCompanyuuid',
        'companyname' => 'setCompanyname',
        'postalcode' => 'setPostalcode',
        'customertype' => 'setCustomertype',
        'status' => 'setStatus',
        'customeraccountid' => 'setCustomeraccountid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phone' => 'getPhone',
        'city' => 'getCity',
        'fax' => 'getFax',
        'country' => 'getCountry',
        'address' => 'getAddress',
        'state' => 'getState',
        'website' => 'getWebsite',
        'companyuuid' => 'getCompanyuuid',
        'companyname' => 'getCompanyname',
        'postalcode' => 'getPostalcode',
        'customertype' => 'getCustomertype',
        'status' => 'getStatus',
        'customeraccountid' => 'getCustomeraccountid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
        $this->container['companyuuid'] = isset($data['companyuuid']) ? $data['companyuuid'] : null;
        $this->container['companyname'] = isset($data['companyname']) ? $data['companyname'] : null;
        $this->container['postalcode'] = isset($data['postalcode']) ? $data['postalcode'] : null;
        $this->container['customertype'] = isset($data['customertype']) ? $data['customertype'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['customeraccountid'] = isset($data['customeraccountid']) ? $data['customeraccountid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets companyuuid
     *
     * @return string|null
     */
    public function getCompanyuuid()
    {
        return $this->container['companyuuid'];
    }

    /**
     * Sets companyuuid
     *
     * @param string|null $companyuuid companyuuid
     *
     * @return $this
     */
    public function setCompanyuuid($companyuuid)
    {
        $this->container['companyuuid'] = $companyuuid;

        return $this;
    }

    /**
     * Gets companyname
     *
     * @return string|null
     */
    public function getCompanyname()
    {
        return $this->container['companyname'];
    }

    /**
     * Sets companyname
     *
     * @param string|null $companyname companyname
     *
     * @return $this
     */
    public function setCompanyname($companyname)
    {
        $this->container['companyname'] = $companyname;

        return $this;
    }

    /**
     * Gets postalcode
     *
     * @return string|null
     */
    public function getPostalcode()
    {
        return $this->container['postalcode'];
    }

    /**
     * Sets postalcode
     *
     * @param string|null $postalcode postalcode
     *
     * @return $this
     */
    public function setPostalcode($postalcode)
    {
        $this->container['postalcode'] = $postalcode;

        return $this;
    }

    /**
     * Gets customertype
     *
     * @return string|null
     */
    public function getCustomertype()
    {
        return $this->container['customertype'];
    }

    /**
     * Sets customertype
     *
     * @param string|null $customertype customertype
     *
     * @return $this
     */
    public function setCustomertype($customertype)
    {
        $this->container['customertype'] = $customertype;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customeraccountid
     *
     * @return string|null
     */
    public function getCustomeraccountid()
    {
        return $this->container['customeraccountid'];
    }

    /**
     * Sets customeraccountid
     *
     * @param string|null $customeraccountid customeraccountid
     *
     * @return $this
     */
    public function setCustomeraccountid($customeraccountid)
    {
        $this->container['customeraccountid'] = $customeraccountid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


