<?php
/**
 * Backup
 *
 * PHP version 5
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telstra Programmable Network API
 *
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.4.2
 * Contact: pnapi-support@team.telstra.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace tpn\Model;

use \ArrayAccess;
use \tpn\ObjectSerializer;

/**
 * Backup Class Doc Comment
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Backup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'backup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backup_name' => 'string',
        'uuid' => 'string',
        'vnf_uuid' => 'string',
        'glance_image_id' => 'string',
        'backup_schedule_uuid' => 'string',
        'total_interfaces' => 'int',
        'backup_started_at' => 'string',
        'backup_completed_at' => 'string',
        'backup_restored_at' => 'string',
        'backup_restored_by' => 'string',
        'replace_backup_uuid' => 'string',
        'status' => 'string',
        'status_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'backup_name' => null,
        'uuid' => null,
        'vnf_uuid' => null,
        'glance_image_id' => null,
        'backup_schedule_uuid' => null,
        'total_interfaces' => 'int32',
        'backup_started_at' => null,
        'backup_completed_at' => null,
        'backup_restored_at' => null,
        'backup_restored_by' => null,
        'replace_backup_uuid' => null,
        'status' => null,
        'status_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_name' => 'backup_name',
        'uuid' => 'uuid',
        'vnf_uuid' => 'vnf_uuid',
        'glance_image_id' => 'glance_image_id',
        'backup_schedule_uuid' => 'backup_schedule_uuid',
        'total_interfaces' => 'total_interfaces',
        'backup_started_at' => 'backup_started_at',
        'backup_completed_at' => 'backup_completed_at',
        'backup_restored_at' => 'backup_restored_at',
        'backup_restored_by' => 'backup_restored_by',
        'replace_backup_uuid' => 'replace_backup_uuid',
        'status' => 'Status',
        'status_code' => 'status_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_name' => 'setBackupName',
        'uuid' => 'setUuid',
        'vnf_uuid' => 'setVnfUuid',
        'glance_image_id' => 'setGlanceImageId',
        'backup_schedule_uuid' => 'setBackupScheduleUuid',
        'total_interfaces' => 'setTotalInterfaces',
        'backup_started_at' => 'setBackupStartedAt',
        'backup_completed_at' => 'setBackupCompletedAt',
        'backup_restored_at' => 'setBackupRestoredAt',
        'backup_restored_by' => 'setBackupRestoredBy',
        'replace_backup_uuid' => 'setReplaceBackupUuid',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_name' => 'getBackupName',
        'uuid' => 'getUuid',
        'vnf_uuid' => 'getVnfUuid',
        'glance_image_id' => 'getGlanceImageId',
        'backup_schedule_uuid' => 'getBackupScheduleUuid',
        'total_interfaces' => 'getTotalInterfaces',
        'backup_started_at' => 'getBackupStartedAt',
        'backup_completed_at' => 'getBackupCompletedAt',
        'backup_restored_at' => 'getBackupRestoredAt',
        'backup_restored_by' => 'getBackupRestoredBy',
        'replace_backup_uuid' => 'getReplaceBackupUuid',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backup_name'] = isset($data['backup_name']) ? $data['backup_name'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['vnf_uuid'] = isset($data['vnf_uuid']) ? $data['vnf_uuid'] : null;
        $this->container['glance_image_id'] = isset($data['glance_image_id']) ? $data['glance_image_id'] : null;
        $this->container['backup_schedule_uuid'] = isset($data['backup_schedule_uuid']) ? $data['backup_schedule_uuid'] : null;
        $this->container['total_interfaces'] = isset($data['total_interfaces']) ? $data['total_interfaces'] : null;
        $this->container['backup_started_at'] = isset($data['backup_started_at']) ? $data['backup_started_at'] : null;
        $this->container['backup_completed_at'] = isset($data['backup_completed_at']) ? $data['backup_completed_at'] : null;
        $this->container['backup_restored_at'] = isset($data['backup_restored_at']) ? $data['backup_restored_at'] : null;
        $this->container['backup_restored_by'] = isset($data['backup_restored_by']) ? $data['backup_restored_by'] : null;
        $this->container['replace_backup_uuid'] = isset($data['replace_backup_uuid']) ? $data['replace_backup_uuid'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_name
     *
     * @return string|null
     */
    public function getBackupName()
    {
        return $this->container['backup_name'];
    }

    /**
     * Sets backup_name
     *
     * @param string|null $backup_name User-defined name referring to the backup
     *
     * @return $this
     */
    public function setBackupName($backup_name)
    {
        $this->container['backup_name'] = $backup_name;

        return $this;
    }

    /**
     * Gets uuid
     *
     * @return string|null
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     *
     * @param string|null $uuid UUID of the backup instance
     *
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets vnf_uuid
     *
     * @return string|null
     */
    public function getVnfUuid()
    {
        return $this->container['vnf_uuid'];
    }

    /**
     * Sets vnf_uuid
     *
     * @param string|null $vnf_uuid UUID of the VNF being backed up
     *
     * @return $this
     */
    public function setVnfUuid($vnf_uuid)
    {
        $this->container['vnf_uuid'] = $vnf_uuid;

        return $this;
    }

    /**
     * Gets glance_image_id
     *
     * @return string|null
     */
    public function getGlanceImageId()
    {
        return $this->container['glance_image_id'];
    }

    /**
     * Sets glance_image_id
     *
     * @param string|null $glance_image_id UUID of the underlying image id for the backup
     *
     * @return $this
     */
    public function setGlanceImageId($glance_image_id)
    {
        $this->container['glance_image_id'] = $glance_image_id;

        return $this;
    }

    /**
     * Gets backup_schedule_uuid
     *
     * @return string|null
     */
    public function getBackupScheduleUuid()
    {
        return $this->container['backup_schedule_uuid'];
    }

    /**
     * Sets backup_schedule_uuid
     *
     * @param string|null $backup_schedule_uuid backup_schedule_uuid
     *
     * @return $this
     */
    public function setBackupScheduleUuid($backup_schedule_uuid)
    {
        $this->container['backup_schedule_uuid'] = $backup_schedule_uuid;

        return $this;
    }

    /**
     * Gets total_interfaces
     *
     * @return int|null
     */
    public function getTotalInterfaces()
    {
        return $this->container['total_interfaces'];
    }

    /**
     * Sets total_interfaces
     *
     * @param int|null $total_interfaces Number of virtual interfaces active when the VNF was backed up
     *
     * @return $this
     */
    public function setTotalInterfaces($total_interfaces)
    {
        $this->container['total_interfaces'] = $total_interfaces;

        return $this;
    }

    /**
     * Gets backup_started_at
     *
     * @return string|null
     */
    public function getBackupStartedAt()
    {
        return $this->container['backup_started_at'];
    }

    /**
     * Sets backup_started_at
     *
     * @param string|null $backup_started_at Time at which backup was started YYYY-MM-DD HH:MM:SS.S
     *
     * @return $this
     */
    public function setBackupStartedAt($backup_started_at)
    {
        $this->container['backup_started_at'] = $backup_started_at;

        return $this;
    }

    /**
     * Gets backup_completed_at
     *
     * @return string|null
     */
    public function getBackupCompletedAt()
    {
        return $this->container['backup_completed_at'];
    }

    /**
     * Sets backup_completed_at
     *
     * @param string|null $backup_completed_at Time at which backup was completed YYYY-MM-DD HH:MM:SS.S
     *
     * @return $this
     */
    public function setBackupCompletedAt($backup_completed_at)
    {
        $this->container['backup_completed_at'] = $backup_completed_at;

        return $this;
    }

    /**
     * Gets backup_restored_at
     *
     * @return string|null
     */
    public function getBackupRestoredAt()
    {
        return $this->container['backup_restored_at'];
    }

    /**
     * Sets backup_restored_at
     *
     * @param string|null $backup_restored_at Time at which backup was most recently restored YYYY-MM-DD HH:MM:SS.S
     *
     * @return $this
     */
    public function setBackupRestoredAt($backup_restored_at)
    {
        $this->container['backup_restored_at'] = $backup_restored_at;

        return $this;
    }

    /**
     * Gets backup_restored_by
     *
     * @return string|null
     */
    public function getBackupRestoredBy()
    {
        return $this->container['backup_restored_by'];
    }

    /**
     * Sets backup_restored_by
     *
     * @param string|null $backup_restored_by UUID of the user who most recently restored the backup
     *
     * @return $this
     */
    public function setBackupRestoredBy($backup_restored_by)
    {
        $this->container['backup_restored_by'] = $backup_restored_by;

        return $this;
    }

    /**
     * Gets replace_backup_uuid
     *
     * @return string|null
     */
    public function getReplaceBackupUuid()
    {
        return $this->container['replace_backup_uuid'];
    }

    /**
     * Sets replace_backup_uuid
     *
     * @param string|null $replace_backup_uuid UUID of the backup that the current backup replaced
     *
     * @return $this
     */
    public function setReplaceBackupUuid($replace_backup_uuid)
    {
        $this->container['replace_backup_uuid'] = $replace_backup_uuid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Description of the current state of the backup
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code \"Unique code representing the current state of the backup:   CRG=Creating, CRE=Created, DLG=Deleting, DEL=Deleted,   REG=Restoring, ACT=Active/Restored\"
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


