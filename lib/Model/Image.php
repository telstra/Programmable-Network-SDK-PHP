<?php
/**
 * Image
 *
 * PHP version 5
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telstra Programmable Network API
 *
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.4.2
 * Contact: pnapi-support@team.telstra.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace tpn\Model;

use \ArrayAccess;
use \tpn\ObjectSerializer;

/**
 * Image Class Doc Comment
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Image implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'image';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brief_description' => 'string',
        'buyers' => 'string',
        'classifications' => '\tpn\Model\ImageClassifications[]',
        'comments' => 'string',
        'create_at' => 'int',
        'creator' => 'string',
        'description' => 'string',
        'eos' => 'string',
        'flavors' => '\tpn\Model\Flavor[]',
        'flavors_price' => 'string',
        'glance_comments' => 'string',
        'glance_image' => '\tpn\Model\ImageGlanceImage',
        'glance_name' => 'string',
        'glance_properties' => 'string',
        'id' => 'int',
        'image_format' => 'string',
        'license_required' => 'bool',
        'logo' => 'string',
        'max_ports' => 'int',
        'md5' => 'string',
        'min_ports' => 'int',
        'name' => 'string',
        'os_version' => 'string',
        'owner' => 'string',
        'product' => '\tpn\Model\ImageProduct',
        'publish_date' => 'string',
        'restrict_vnc_console' => 'bool',
        'status' => 'string',
        'support_hot_plug' => 'bool',
        'tags' => '\tpn\Model\VnfTag[]',
        'upload_at' => 'int',
        'vendor_name' => 'string',
        'zero_day_config_spec' => '\tpn\Model\ImageZeroDayConfigSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'brief_description' => null,
        'buyers' => null,
        'classifications' => null,
        'comments' => null,
        'create_at' => 'int32',
        'creator' => null,
        'description' => null,
        'eos' => null,
        'flavors' => null,
        'flavors_price' => null,
        'glance_comments' => null,
        'glance_image' => null,
        'glance_name' => null,
        'glance_properties' => null,
        'id' => 'int32',
        'image_format' => null,
        'license_required' => null,
        'logo' => null,
        'max_ports' => 'int32',
        'md5' => null,
        'min_ports' => 'int32',
        'name' => null,
        'os_version' => null,
        'owner' => null,
        'product' => null,
        'publish_date' => null,
        'restrict_vnc_console' => null,
        'status' => null,
        'support_hot_plug' => null,
        'tags' => null,
        'upload_at' => 'int32',
        'vendor_name' => null,
        'zero_day_config_spec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brief_description' => 'brief_description',
        'buyers' => 'buyers',
        'classifications' => 'classifications',
        'comments' => 'comments',
        'create_at' => 'create_at',
        'creator' => 'creator',
        'description' => 'description',
        'eos' => 'eos',
        'flavors' => 'flavors',
        'flavors_price' => 'flavors_price',
        'glance_comments' => 'glance_comments',
        'glance_image' => 'glance_image',
        'glance_name' => 'glance_name',
        'glance_properties' => 'glance_properties',
        'id' => 'id',
        'image_format' => 'image_format',
        'license_required' => 'license_required',
        'logo' => 'logo',
        'max_ports' => 'max_ports',
        'md5' => 'md5',
        'min_ports' => 'min_ports',
        'name' => 'name',
        'os_version' => 'os_version',
        'owner' => 'owner',
        'product' => 'product',
        'publish_date' => 'publish_date',
        'restrict_vnc_console' => 'restrict_vnc_console',
        'status' => 'status',
        'support_hot_plug' => 'support_hot_plug',
        'tags' => 'tags',
        'upload_at' => 'upload_at',
        'vendor_name' => 'vendor_name',
        'zero_day_config_spec' => 'zero_day_config_spec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brief_description' => 'setBriefDescription',
        'buyers' => 'setBuyers',
        'classifications' => 'setClassifications',
        'comments' => 'setComments',
        'create_at' => 'setCreateAt',
        'creator' => 'setCreator',
        'description' => 'setDescription',
        'eos' => 'setEos',
        'flavors' => 'setFlavors',
        'flavors_price' => 'setFlavorsPrice',
        'glance_comments' => 'setGlanceComments',
        'glance_image' => 'setGlanceImage',
        'glance_name' => 'setGlanceName',
        'glance_properties' => 'setGlanceProperties',
        'id' => 'setId',
        'image_format' => 'setImageFormat',
        'license_required' => 'setLicenseRequired',
        'logo' => 'setLogo',
        'max_ports' => 'setMaxPorts',
        'md5' => 'setMd5',
        'min_ports' => 'setMinPorts',
        'name' => 'setName',
        'os_version' => 'setOsVersion',
        'owner' => 'setOwner',
        'product' => 'setProduct',
        'publish_date' => 'setPublishDate',
        'restrict_vnc_console' => 'setRestrictVncConsole',
        'status' => 'setStatus',
        'support_hot_plug' => 'setSupportHotPlug',
        'tags' => 'setTags',
        'upload_at' => 'setUploadAt',
        'vendor_name' => 'setVendorName',
        'zero_day_config_spec' => 'setZeroDayConfigSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brief_description' => 'getBriefDescription',
        'buyers' => 'getBuyers',
        'classifications' => 'getClassifications',
        'comments' => 'getComments',
        'create_at' => 'getCreateAt',
        'creator' => 'getCreator',
        'description' => 'getDescription',
        'eos' => 'getEos',
        'flavors' => 'getFlavors',
        'flavors_price' => 'getFlavorsPrice',
        'glance_comments' => 'getGlanceComments',
        'glance_image' => 'getGlanceImage',
        'glance_name' => 'getGlanceName',
        'glance_properties' => 'getGlanceProperties',
        'id' => 'getId',
        'image_format' => 'getImageFormat',
        'license_required' => 'getLicenseRequired',
        'logo' => 'getLogo',
        'max_ports' => 'getMaxPorts',
        'md5' => 'getMd5',
        'min_ports' => 'getMinPorts',
        'name' => 'getName',
        'os_version' => 'getOsVersion',
        'owner' => 'getOwner',
        'product' => 'getProduct',
        'publish_date' => 'getPublishDate',
        'restrict_vnc_console' => 'getRestrictVncConsole',
        'status' => 'getStatus',
        'support_hot_plug' => 'getSupportHotPlug',
        'tags' => 'getTags',
        'upload_at' => 'getUploadAt',
        'vendor_name' => 'getVendorName',
        'zero_day_config_spec' => 'getZeroDayConfigSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brief_description'] = isset($data['brief_description']) ? $data['brief_description'] : null;
        $this->container['buyers'] = isset($data['buyers']) ? $data['buyers'] : null;
        $this->container['classifications'] = isset($data['classifications']) ? $data['classifications'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['create_at'] = isset($data['create_at']) ? $data['create_at'] : null;
        $this->container['creator'] = isset($data['creator']) ? $data['creator'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['eos'] = isset($data['eos']) ? $data['eos'] : null;
        $this->container['flavors'] = isset($data['flavors']) ? $data['flavors'] : null;
        $this->container['flavors_price'] = isset($data['flavors_price']) ? $data['flavors_price'] : null;
        $this->container['glance_comments'] = isset($data['glance_comments']) ? $data['glance_comments'] : null;
        $this->container['glance_image'] = isset($data['glance_image']) ? $data['glance_image'] : null;
        $this->container['glance_name'] = isset($data['glance_name']) ? $data['glance_name'] : null;
        $this->container['glance_properties'] = isset($data['glance_properties']) ? $data['glance_properties'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_format'] = isset($data['image_format']) ? $data['image_format'] : null;
        $this->container['license_required'] = isset($data['license_required']) ? $data['license_required'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['max_ports'] = isset($data['max_ports']) ? $data['max_ports'] : null;
        $this->container['md5'] = isset($data['md5']) ? $data['md5'] : null;
        $this->container['min_ports'] = isset($data['min_ports']) ? $data['min_ports'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['os_version'] = isset($data['os_version']) ? $data['os_version'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['publish_date'] = isset($data['publish_date']) ? $data['publish_date'] : null;
        $this->container['restrict_vnc_console'] = isset($data['restrict_vnc_console']) ? $data['restrict_vnc_console'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['support_hot_plug'] = isset($data['support_hot_plug']) ? $data['support_hot_plug'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['upload_at'] = isset($data['upload_at']) ? $data['upload_at'] : null;
        $this->container['vendor_name'] = isset($data['vendor_name']) ? $data['vendor_name'] : null;
        $this->container['zero_day_config_spec'] = isset($data['zero_day_config_spec']) ? $data['zero_day_config_spec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brief_description
     *
     * @return string|null
     */
    public function getBriefDescription()
    {
        return $this->container['brief_description'];
    }

    /**
     * Sets brief_description
     *
     * @param string|null $brief_description brief_description
     *
     * @return $this
     */
    public function setBriefDescription($brief_description)
    {
        $this->container['brief_description'] = $brief_description;

        return $this;
    }

    /**
     * Gets buyers
     *
     * @return string|null
     */
    public function getBuyers()
    {
        return $this->container['buyers'];
    }

    /**
     * Sets buyers
     *
     * @param string|null $buyers buyers
     *
     * @return $this
     */
    public function setBuyers($buyers)
    {
        $this->container['buyers'] = $buyers;

        return $this;
    }

    /**
     * Gets classifications
     *
     * @return \tpn\Model\ImageClassifications[]|null
     */
    public function getClassifications()
    {
        return $this->container['classifications'];
    }

    /**
     * Sets classifications
     *
     * @param \tpn\Model\ImageClassifications[]|null $classifications classifications
     *
     * @return $this
     */
    public function setClassifications($classifications)
    {
        $this->container['classifications'] = $classifications;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets create_at
     *
     * @return int|null
     */
    public function getCreateAt()
    {
        return $this->container['create_at'];
    }

    /**
     * Sets create_at
     *
     * @param int|null $create_at create_at
     *
     * @return $this
     */
    public function setCreateAt($create_at)
    {
        $this->container['create_at'] = $create_at;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string|null $creator creator
     *
     * @return $this
     */
    public function setCreator($creator)
    {
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets eos
     *
     * @return string|null
     */
    public function getEos()
    {
        return $this->container['eos'];
    }

    /**
     * Sets eos
     *
     * @param string|null $eos eos
     *
     * @return $this
     */
    public function setEos($eos)
    {
        $this->container['eos'] = $eos;

        return $this;
    }

    /**
     * Gets flavors
     *
     * @return \tpn\Model\Flavor[]|null
     */
    public function getFlavors()
    {
        return $this->container['flavors'];
    }

    /**
     * Sets flavors
     *
     * @param \tpn\Model\Flavor[]|null $flavors flavors
     *
     * @return $this
     */
    public function setFlavors($flavors)
    {
        $this->container['flavors'] = $flavors;

        return $this;
    }

    /**
     * Gets flavors_price
     *
     * @return string|null
     */
    public function getFlavorsPrice()
    {
        return $this->container['flavors_price'];
    }

    /**
     * Sets flavors_price
     *
     * @param string|null $flavors_price flavors_price
     *
     * @return $this
     */
    public function setFlavorsPrice($flavors_price)
    {
        $this->container['flavors_price'] = $flavors_price;

        return $this;
    }

    /**
     * Gets glance_comments
     *
     * @return string|null
     */
    public function getGlanceComments()
    {
        return $this->container['glance_comments'];
    }

    /**
     * Sets glance_comments
     *
     * @param string|null $glance_comments glance_comments
     *
     * @return $this
     */
    public function setGlanceComments($glance_comments)
    {
        $this->container['glance_comments'] = $glance_comments;

        return $this;
    }

    /**
     * Gets glance_image
     *
     * @return \tpn\Model\ImageGlanceImage|null
     */
    public function getGlanceImage()
    {
        return $this->container['glance_image'];
    }

    /**
     * Sets glance_image
     *
     * @param \tpn\Model\ImageGlanceImage|null $glance_image glance_image
     *
     * @return $this
     */
    public function setGlanceImage($glance_image)
    {
        $this->container['glance_image'] = $glance_image;

        return $this;
    }

    /**
     * Gets glance_name
     *
     * @return string|null
     */
    public function getGlanceName()
    {
        return $this->container['glance_name'];
    }

    /**
     * Sets glance_name
     *
     * @param string|null $glance_name glance_name
     *
     * @return $this
     */
    public function setGlanceName($glance_name)
    {
        $this->container['glance_name'] = $glance_name;

        return $this;
    }

    /**
     * Gets glance_properties
     *
     * @return string|null
     */
    public function getGlanceProperties()
    {
        return $this->container['glance_properties'];
    }

    /**
     * Sets glance_properties
     *
     * @param string|null $glance_properties glance_properties
     *
     * @return $this
     */
    public function setGlanceProperties($glance_properties)
    {
        $this->container['glance_properties'] = $glance_properties;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_format
     *
     * @return string|null
     */
    public function getImageFormat()
    {
        return $this->container['image_format'];
    }

    /**
     * Sets image_format
     *
     * @param string|null $image_format image_format
     *
     * @return $this
     */
    public function setImageFormat($image_format)
    {
        $this->container['image_format'] = $image_format;

        return $this;
    }

    /**
     * Gets license_required
     *
     * @return bool|null
     */
    public function getLicenseRequired()
    {
        return $this->container['license_required'];
    }

    /**
     * Sets license_required
     *
     * @param bool|null $license_required license_required
     *
     * @return $this
     */
    public function setLicenseRequired($license_required)
    {
        $this->container['license_required'] = $license_required;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets max_ports
     *
     * @return int|null
     */
    public function getMaxPorts()
    {
        return $this->container['max_ports'];
    }

    /**
     * Sets max_ports
     *
     * @param int|null $max_ports max_ports
     *
     * @return $this
     */
    public function setMaxPorts($max_ports)
    {
        $this->container['max_ports'] = $max_ports;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string|null
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string|null $md5 md5
     *
     * @return $this
     */
    public function setMd5($md5)
    {
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets min_ports
     *
     * @return int|null
     */
    public function getMinPorts()
    {
        return $this->container['min_ports'];
    }

    /**
     * Sets min_ports
     *
     * @param int|null $min_ports min_ports
     *
     * @return $this
     */
    public function setMinPorts($min_ports)
    {
        $this->container['min_ports'] = $min_ports;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return string|null
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param string|null $os_version os_version
     *
     * @return $this
     */
    public function setOsVersion($os_version)
    {
        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string|null $owner owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \tpn\Model\ImageProduct|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \tpn\Model\ImageProduct|null $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets publish_date
     *
     * @return string|null
     */
    public function getPublishDate()
    {
        return $this->container['publish_date'];
    }

    /**
     * Sets publish_date
     *
     * @param string|null $publish_date publish_date
     *
     * @return $this
     */
    public function setPublishDate($publish_date)
    {
        $this->container['publish_date'] = $publish_date;

        return $this;
    }

    /**
     * Gets restrict_vnc_console
     *
     * @return bool|null
     */
    public function getRestrictVncConsole()
    {
        return $this->container['restrict_vnc_console'];
    }

    /**
     * Sets restrict_vnc_console
     *
     * @param bool|null $restrict_vnc_console restrict_vnc_console
     *
     * @return $this
     */
    public function setRestrictVncConsole($restrict_vnc_console)
    {
        $this->container['restrict_vnc_console'] = $restrict_vnc_console;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets support_hot_plug
     *
     * @return bool|null
     */
    public function getSupportHotPlug()
    {
        return $this->container['support_hot_plug'];
    }

    /**
     * Sets support_hot_plug
     *
     * @param bool|null $support_hot_plug support_hot_plug
     *
     * @return $this
     */
    public function setSupportHotPlug($support_hot_plug)
    {
        $this->container['support_hot_plug'] = $support_hot_plug;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \tpn\Model\VnfTag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \tpn\Model\VnfTag[]|null $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets upload_at
     *
     * @return int|null
     */
    public function getUploadAt()
    {
        return $this->container['upload_at'];
    }

    /**
     * Sets upload_at
     *
     * @param int|null $upload_at upload_at
     *
     * @return $this
     */
    public function setUploadAt($upload_at)
    {
        $this->container['upload_at'] = $upload_at;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string|null
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string|null $vendor_name vendor_name
     *
     * @return $this
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets zero_day_config_spec
     *
     * @return \tpn\Model\ImageZeroDayConfigSpec|null
     */
    public function getZeroDayConfigSpec()
    {
        return $this->container['zero_day_config_spec'];
    }

    /**
     * Sets zero_day_config_spec
     *
     * @param \tpn\Model\ImageZeroDayConfigSpec|null $zero_day_config_spec zero_day_config_spec
     *
     * @return $this
     */
    public function setZeroDayConfigSpec($zero_day_config_spec)
    {
        $this->container['zero_day_config_spec'] = $zero_day_config_spec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


