<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telstra Programmable Network API
 *
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.4.2
 * Contact: pnapi-support@team.telstra.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace tpn\Model;

use \ArrayAccess;
use \tpn\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class User implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'useruuid' => 'string',
        'usercountry' => 'string',
        'emailaddress' => 'string',
        'jobtitle' => 'string',
        'firstname' => 'string',
        'middlename' => 'string',
        'lastname' => 'string',
        'phonenumber' => 'string',
        'phoneext' => 'string',
        'phonetype' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'title' => null,
        'useruuid' => null,
        'usercountry' => null,
        'emailaddress' => null,
        'jobtitle' => null,
        'firstname' => null,
        'middlename' => null,
        'lastname' => null,
        'phonenumber' => null,
        'phoneext' => null,
        'phonetype' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'useruuid' => 'useruuid',
        'usercountry' => 'usercountry',
        'emailaddress' => 'emailaddress',
        'jobtitle' => 'jobtitle',
        'firstname' => 'firstname',
        'middlename' => 'middlename',
        'lastname' => 'lastname',
        'phonenumber' => 'phonenumber',
        'phoneext' => 'phoneext',
        'phonetype' => 'phonetype',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'useruuid' => 'setUseruuid',
        'usercountry' => 'setUsercountry',
        'emailaddress' => 'setEmailaddress',
        'jobtitle' => 'setJobtitle',
        'firstname' => 'setFirstname',
        'middlename' => 'setMiddlename',
        'lastname' => 'setLastname',
        'phonenumber' => 'setPhonenumber',
        'phoneext' => 'setPhoneext',
        'phonetype' => 'setPhonetype',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'useruuid' => 'getUseruuid',
        'usercountry' => 'getUsercountry',
        'emailaddress' => 'getEmailaddress',
        'jobtitle' => 'getJobtitle',
        'firstname' => 'getFirstname',
        'middlename' => 'getMiddlename',
        'lastname' => 'getLastname',
        'phonenumber' => 'getPhonenumber',
        'phoneext' => 'getPhoneext',
        'phonetype' => 'getPhonetype',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['useruuid'] = isset($data['useruuid']) ? $data['useruuid'] : null;
        $this->container['usercountry'] = isset($data['usercountry']) ? $data['usercountry'] : null;
        $this->container['emailaddress'] = isset($data['emailaddress']) ? $data['emailaddress'] : null;
        $this->container['jobtitle'] = isset($data['jobtitle']) ? $data['jobtitle'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['middlename'] = isset($data['middlename']) ? $data['middlename'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['phonenumber'] = isset($data['phonenumber']) ? $data['phonenumber'] : null;
        $this->container['phoneext'] = isset($data['phoneext']) ? $data['phoneext'] : null;
        $this->container['phonetype'] = isset($data['phonetype']) ? $data['phonetype'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['useruuid'] === null) {
            $invalidProperties[] = "'useruuid' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets useruuid
     *
     * @return string
     */
    public function getUseruuid()
    {
        return $this->container['useruuid'];
    }

    /**
     * Sets useruuid
     *
     * @param string $useruuid useruuid
     *
     * @return $this
     */
    public function setUseruuid($useruuid)
    {
        $this->container['useruuid'] = $useruuid;

        return $this;
    }

    /**
     * Gets usercountry
     *
     * @return string|null
     */
    public function getUsercountry()
    {
        return $this->container['usercountry'];
    }

    /**
     * Sets usercountry
     *
     * @param string|null $usercountry usercountry
     *
     * @return $this
     */
    public function setUsercountry($usercountry)
    {
        $this->container['usercountry'] = $usercountry;

        return $this;
    }

    /**
     * Gets emailaddress
     *
     * @return string|null
     */
    public function getEmailaddress()
    {
        return $this->container['emailaddress'];
    }

    /**
     * Sets emailaddress
     *
     * @param string|null $emailaddress emailaddress
     *
     * @return $this
     */
    public function setEmailaddress($emailaddress)
    {
        $this->container['emailaddress'] = $emailaddress;

        return $this;
    }

    /**
     * Gets jobtitle
     *
     * @return string|null
     */
    public function getJobtitle()
    {
        return $this->container['jobtitle'];
    }

    /**
     * Sets jobtitle
     *
     * @param string|null $jobtitle jobtitle
     *
     * @return $this
     */
    public function setJobtitle($jobtitle)
    {
        $this->container['jobtitle'] = $jobtitle;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string|null
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string|null $middlename middlename
     *
     * @return $this
     */
    public function setMiddlename($middlename)
    {
        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets phonenumber
     *
     * @return string|null
     */
    public function getPhonenumber()
    {
        return $this->container['phonenumber'];
    }

    /**
     * Sets phonenumber
     *
     * @param string|null $phonenumber phonenumber
     *
     * @return $this
     */
    public function setPhonenumber($phonenumber)
    {
        $this->container['phonenumber'] = $phonenumber;

        return $this;
    }

    /**
     * Gets phoneext
     *
     * @return string|null
     */
    public function getPhoneext()
    {
        return $this->container['phoneext'];
    }

    /**
     * Sets phoneext
     *
     * @param string|null $phoneext phoneext
     *
     * @return $this
     */
    public function setPhoneext($phoneext)
    {
        $this->container['phoneext'] = $phoneext;

        return $this;
    }

    /**
     * Gets phonetype
     *
     * @return string|null
     */
    public function getPhonetype()
    {
        return $this->container['phonetype'];
    }

    /**
     * Sets phonetype
     *
     * @param string|null $phonetype phonetype
     *
     * @return $this
     */
    public function setPhonetype($phonetype)
    {
        $this->container['phonetype'] = $phonetype;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


