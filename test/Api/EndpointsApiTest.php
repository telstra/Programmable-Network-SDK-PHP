<?php
/**
 * EndpointsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Telstra Programmable Network API
 *
 * Telstra Programmable Network is a self-provisioning platform that allows its users to create on-demand connectivity services between multiple end-points and add various network functions to those services. Programmable Network enables to connectivity to a global ecosystem of networking services as well as public and private cloud services. Once you are connected to the platform on one or more POPs (points of presence), you can start creating those services based on the use case that you want to accomplish. The Programmable Network API is available to all customers who have registered to use the Programmable Network. To register, please contact your account representative.
 *
 * OpenAPI spec version: 2.4.2
 * Contact: pnapi-support@team.telstra.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.1.2
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace tpn;

use \tpn\Configuration;
use \tpn\ApiException;
use \tpn\ObjectSerializer;

/**
 * EndpointsApiTest Class Doc Comment
 *
 * @category Class
 * @package  tpn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EndpointsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for endpointEndpointuuidGet
     *
     * Get Endpoint name and status.
     *
     */
    public function testEndpointEndpointuuidGet()
    {
    }

    /**
     * Test case for endpointEndpointuuidPut
     *
     * Update Endpoint name.
     *
     */
    public function testEndpointEndpointuuidPut()
    {
    }

    /**
     * Test case for endpointsAssignTopologyTag
     *
     * Assign an Endpoint to a Topology.
     *
     */
    public function testEndpointsAssignTopologyTag()
    {
    }

    /**
     * Test case for endpointsTopologyTagUuid
     *
     * List Endpoints for Topology.
     *
     */
    public function testEndpointsTopologyTagUuid()
    {
    }

    /**
     * Test case for endpointsTopologyTagUuidEndpoint
     *
     * Remove Endpoint from a Topology.
     *
     */
    public function testEndpointsTopologyTagUuidEndpoint()
    {
    }

    /**
     * Test case for inventoryEndpoint
     *
     * Get information about the specified endpoint.
     *
     */
    public function testInventoryEndpoint()
    {
    }

    /**
     * Test case for inventoryEndpointsCustomeruuid
     *
     * Get list of endpoints for a customer.
     *
     */
    public function testInventoryEndpointsCustomeruuid()
    {
    }

    /**
     * Test case for inventoryLinksStatsEndpoint
     *
     * Get statistics for endpoint.
     *
     */
    public function testInventoryLinksStatsEndpoint()
    {
    }

    /**
     * Test case for inventoryLinksStatsEndpointstate
     *
     * Get state statistics for endpoint.
     *
     */
    public function testInventoryLinksStatsEndpointstate()
    {
    }

    /**
     * Test case for inventoryRegularendpoint
     *
     * Create Physical (Port) Endpoint.
     *
     */
    public function testInventoryRegularendpoint()
    {
    }

    /**
     * Test case for inventoryRegularvport
     *
     * Create VPort for physical endpoint.
     *
     */
    public function testInventoryRegularvport()
    {
    }

    /**
     * Test case for inventoryVnfendpoint
     *
     * Instantiate Virtual Network Function.
     *
     */
    public function testInventoryVnfendpoint()
    {
    }

    /**
     * Test case for vnfendpointVnfuuid
     *
     * Get details of a specific VNF.
     *
     */
    public function testVnfendpointVnfuuid()
    {
    }
}
